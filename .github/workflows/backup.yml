name: Backup

on:
  schedule:
    - cron: '0 16 * * 1' # Weekly on Monday at 4 PM
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Type of backup to perform'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - database
        - files
        - code

jobs:
  backup:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, pdo_mysql, curl, zip, bcmath

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Setup Environment
      run: |
        cp .env.example .env
        php artisan key:generate
        php artisan config:cache

    - name: Create Backup Directory
      run: |
        mkdir -p backups/$(date +%Y%m%d_%H%M%S)
        export BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"

    - name: Backup Database
      if: github.event.inputs.backup_type == 'full' || github.event.inputs.backup_type == 'database'
      run: |
        export BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
        mkdir -p $BACKUP_DIR
        
        # Create database backup
        php artisan db:backup --destination=$BACKUP_DIR/database.sql
        
        # Create compressed backup
        gzip $BACKUP_DIR/database.sql
        
        echo "Database backup created: $BACKUP_DIR/database.sql.gz"

    - name: Backup Files
      if: github.event.inputs.backup_type == 'full' || github.event.inputs.backup_type == 'files'
      run: |
        export BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
        mkdir -p $BACKUP_DIR
        
        # Backup storage directory
        tar -czf $BACKUP_DIR/storage.tar.gz storage/
        
        # Backup public directory
        tar -czf $BACKUP_DIR/public.tar.gz public/
        
        # Backup uploads
        if [ -d "storage/app/uploads" ]; then
          tar -czf $BACKUP_DIR/uploads.tar.gz storage/app/uploads/
        fi
        
        echo "Files backup created: $BACKUP_DIR/"

    - name: Backup Code
      if: github.event.inputs.backup_type == 'full' || github.event.inputs.backup_type == 'code'
      run: |
        export BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
        mkdir -p $BACKUP_DIR
        
        # Backup application code
        tar -czf $BACKUP_DIR/code.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='vendor' \
          --exclude='storage/logs' \
          --exclude='storage/framework/cache' \
          --exclude='storage/framework/sessions' \
          --exclude='storage/framework/views' \
          --exclude='bootstrap/cache' \
          --exclude='.env' \
          .
        
        echo "Code backup created: $BACKUP_DIR/code.tar.gz"

    - name: Create Backup Manifest
      run: |
        export BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
        mkdir -p $BACKUP_DIR
        
        # Create backup manifest
        cat > $BACKUP_DIR/manifest.json << EOF
        {
          "backup_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "backup_type": "${{ github.event.inputs.backup_type || 'full' }}",
          "repository": "${{ github.repository }}",
          "commit_sha": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "files": [
            $(ls -1 $BACKUP_DIR | sed 's/^/            "/' | sed 's/$/",/' | sed '$s/,$//')
          ],
          "size": "$(du -sh $BACKUP_DIR | cut -f1)",
          "checksum": "$(find $BACKUP_DIR -type f -exec md5sum {} \; | sort -k 2 | md5sum | cut -d' ' -f1)"
        }
        EOF
        
        echo "Backup manifest created: $BACKUP_DIR/manifest.json"

    - name: Upload Backup Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backup-${{ github.event.inputs.backup_type || 'full' }}-$(date +%Y%m%d_%H%M%S)
        path: |
          backups/
        retention-days: 30

    - name: Update Status
      run: |
        echo "âœ… Backup completed successfully"