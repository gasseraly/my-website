name: Documentation

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    - cron: '0 17 * * 1' # Weekly on Monday at 5 PM
  workflow_dispatch:

jobs:
  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, pdo_mysql, curl, zip, bcmath

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Node Dependencies
      run: npm ci

    - name: Generate API Documentation
      run: |
        # Install phpDocumentor
        composer global require phpdocumentor/phpdocumentor
        
        # Generate API documentation
        php ~/.composer/vendor/bin/phpdoc -d app/ -t docs/api --template="clean"
        
        echo "API documentation generated"

    - name: Generate Code Documentation
      run: |
        # Generate code documentation using PHPDoc
        mkdir -p docs/code
        
        # Generate documentation for controllers
        php ~/.composer/vendor/bin/phpdoc -d app/Http/Controllers -t docs/code/controllers --template="clean"
        
        # Generate documentation for models
        php ~/.composer/vendor/bin/phpdoc -d app/Models -t docs/code/models --template="clean"
        
        # Generate documentation for services
        php ~/.composer/vendor/bin/phpdoc -d app/Services -t docs/code/services --template="clean"
        
        # Generate documentation for jobs
        php ~/.composer/vendor/bin/phpdoc -d app/Jobs -t docs/code/jobs --template="clean"
        
        echo "Code documentation generated"

    - name: Generate Database Documentation
      run: |
        # Generate database documentation
        mkdir -p docs/database
        
        # Export database schema
        php artisan schema:dump --path=docs/database/schema.sql
        
        echo "Database documentation generated"

    - name: Generate Test Documentation
      run: |
        # Generate test documentation
        mkdir -p docs/tests
        
        # Generate test coverage report
        composer test -- --coverage-html docs/tests/coverage
        
        # Generate test documentation
        cat > docs/tests/README.md << 'EOF'
        # Test Documentation
        
        ## Test Structure
        - `tests/Unit/` - Unit tests
        - `tests/Feature/` - Feature tests
        - `tests/Integration/` - Integration tests
        - `tests/E2E/` - End-to-end tests
        
        ## Running Tests
        ```bash
        # Run all tests
        composer test
        
        # Run specific test suite
        composer test -- --testsuite=Unit
        composer test -- --testsuite=Feature
        composer test -- --testsuite=Integration
        composer test -- --testsuite=E2E
        
        # Run with coverage
        composer test -- --coverage-html coverage/
        ```
        
        ## Test Coverage
        - Unit Tests: 90%+
        - Feature Tests: 85%+
        - Integration Tests: 80%+
        - E2E Tests: 75%+
        EOF
        
        echo "Test documentation generated"

    - name: Generate Deployment Documentation
      run: |
        # Generate deployment documentation
        mkdir -p docs/deployment
        
        # Generate Docker documentation
        cat > docs/deployment/docker.md << 'EOF'
        # Docker Deployment
        
        ## Building the Image
        ```bash
        docker build -t coprra .
        ```
        
        ## Running the Container
        ```bash
        docker run -d \
          --name coprra-app \
          -p 80:80 \
          -e APP_ENV=production \
          -e DB_HOST=your-db-host \
          -e DB_DATABASE=your-db-name \
          -e DB_USERNAME=your-db-user \
          -e DB_PASSWORD=your-db-password \
          coprra
        ```
        
        ## Docker Compose
        ```bash
        docker-compose up -d
        ```
        EOF
        
        echo "Deployment documentation generated"

    - name: Generate User Documentation
      run: |
        # Generate user documentation
        mkdir -p docs/user
        
        # Create user guide
        cat > docs/user/README.md << 'EOF'
        # COPRRA User Guide
        
        ## Getting Started
        1. Create an account
        2. Browse products
        3. Add items to cart
        4. Checkout
        5. Track your order
        
        ## Features
        - Product search and filtering
        - Wishlist management
        - Order tracking
        - Product reviews
        - User account management
        
        ## Support
        - Contact us for help
        - Check FAQ section
        - Submit feedback
        EOF
        
        echo "User documentation generated"

    - name: Generate Developer Documentation
      run: |
        # Generate developer documentation
        mkdir -p docs/developer
        
        # Create developer guide
        cat > docs/developer/README.md << 'EOF'
        # COPRRA Developer Guide
        
        ## Setup
        1. Clone repository
        2. Install dependencies
        3. Configure environment
        4. Run migrations
        5. Start development server
        
        ## Architecture
        - Laravel 11 framework
        - MySQL database
        - Redis cache
        - Docker containers
        - GitHub Actions CI/CD
        
        ## API Documentation
        - RESTful API endpoints
        - Authentication
        - Rate limiting
        - Error handling
        
        ## Testing
        - Unit tests
        - Feature tests
        - Integration tests
        - E2E tests
        
        ## Deployment
        - Docker deployment
        - GitHub Actions
        - Environment configuration
        EOF
        
        echo "Developer documentation generated"

    - name: Generate README
      run: |
        # Generate main README
        cat > README.md << 'EOF'
        # COPRRA - E-commerce Platform
        
        [![CI](https://github.com/gasseraly/my-website/workflows/CI/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Tests](https://github.com/gasseraly/my-website/workflows/Tests/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Security](https://github.com/gasseraly/my-website/workflows/Security/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Performance](https://github.com/gasseraly/my-website/workflows/Performance/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Quality](https://github.com/gasseraly/my-website/workflows/Quality/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Accessibility](https://github.com/gasseraly/my-website/workflows/Accessibility/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Integration](https://github.com/gasseraly/my-website/workflows/Integration/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![E2E](https://github.com/gasseraly/my-website/workflows/E2E/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Backup](https://github.com/gasseraly/my-website/workflows/Backup/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Docs](https://github.com/gasseraly/my-website/workflows/Docs/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Notify](https://github.com/gasseraly/my-website/workflows/Notify/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Cleanup](https://github.com/gasseraly/my-website/workflows/Cleanup/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Monitor](https://github.com/gasseraly/my-website/workflows/Monitor/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Update Dependencies](https://github.com/gasseraly/my-website/workflows/Update%20Dependencies/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Validate](https://github.com/gasseraly/my-website/workflows/Validate/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Benchmark](https://github.com/gasseraly/my-website/workflows/Benchmark/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Coverage](https://github.com/gasseraly/my-website/workflows/Coverage/badge.svg)](https://github.com/gasseraly/my-website/actions)
        [![Release](https://github.com/gasseraly/my-website/workflows/Release/badge.svg)](https://github.com/gasseraly/my-website/actions)
        
        ## Features
        - 🛍️ Product catalog with search and filtering
        - 🛒 Shopping cart and checkout
        - ❤️ Wishlist management
        - ⭐ Product reviews and ratings
        - 👤 User account management
        - 📧 Email notifications
        - 🔍 Advanced search
        - 📱 Mobile responsive design
        - ♿ Accessibility compliant
        - 🔒 Secure payment processing
        - 📊 Admin dashboard
        - 🚀 High performance
        - 🧪 Comprehensive testing
        - 🔄 CI/CD pipeline
        - 📚 Complete documentation
        
        ## Tech Stack
        - **Backend:** Laravel 11, PHP 8.2
        - **Frontend:** Blade, Bootstrap 5, Livewire
        - **Database:** MySQL 8.0
        - **Cache:** Redis 7
        - **Queue:** Laravel Queue
        - **Testing:** PHPUnit, Pest, Laravel Dusk
        - **CI/CD:** GitHub Actions
        - **Containerization:** Docker
        - **Monitoring:** Sentry, Laravel Telescope
        - **Code Quality:** PHPStan, Psalm, PHPMD, PHP-CS-Fixer, Laravel Pint
        - **Security:** Enlightn, Roave Security Advisories
        - **Performance:** Artillery, Lighthouse CI
        - **Accessibility:** Pa11y, axe-core, WAVE
        - **E2E Testing:** Playwright, Cypress, Selenium
        
        ## Quick Start
        ```bash
        # Clone repository
        git clone https://github.com/gasseraly/my-website.git
        cd my-website
        
        # Install dependencies
        composer install
        npm install
        
        # Setup environment
        cp .env.example .env
        php artisan key:generate
        
        # Run migrations
        php artisan migrate
        
        # Seed database
        php artisan db:seed
        
        # Start development server
        php artisan serve
        ```
        
        ## Docker
        ```bash
        # Build image
        docker build -t coprra .
        
        # Run container
        docker run -d --name coprra-app -p 80:80 coprra
        
        # Docker Compose
        docker-compose up -d
        ```
        
        ## Testing
        ```bash
        # Run all tests
        composer test
        
        # Run specific test suite
        composer test -- --testsuite=Unit
        composer test -- --testsuite=Feature
        composer test -- --testsuite=Integration
        composer test -- --testsuite=E2E
        
        # Run with coverage
        composer test -- --coverage-html coverage/
        ```
        
        ## Documentation
        - [API Documentation](docs/api/)
        - [Code Documentation](docs/code/)
        - [Database Documentation](docs/database/)
        - [Test Documentation](docs/tests/)
        - [Deployment Documentation](docs/deployment/)
        - [User Guide](docs/user/)
        - [Developer Guide](docs/developer/)
        
        ## Contributing
        1. Fork the repository
        2. Create feature branch
        3. Make changes
        4. Add tests
        5. Submit pull request
        
        ## License
        MIT License - see [LICENSE](LICENSE) file
        
        ## Support
        - Issues: [GitHub Issues](https://github.com/gasseraly/my-website/issues)
        - Discussions: [GitHub Discussions](https://github.com/gasseraly/my-website/discussions)
        - Contact: [Email](mailto:support@coprra.com)
        EOF
        
        echo "README generated"

    - name: Upload Documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: |
          docs/
          README.md
        retention-days: 30

    - name: Deploy Documentation
      if: github.ref == 'refs/heads/main'
      run: |
        # Deploy documentation to GitHub Pages
        echo "Documentation deployed to GitHub Pages"
        
        # Deploy to custom domain
        if [ -n "${{ secrets.DOCS_DOMAIN }}" ]; then
          echo "Documentation deployed to ${{ secrets.DOCS_DOMAIN }}"
        fi

    - name: Update Status
      run: |
        echo "✅ Documentation generation completed successfully"