name: Monitoring

on:
  schedule:
    - cron: '*/5 * * * *' # Every 5 minutes
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check Application Health
      run: |
        # Check application health
        echo "üîç Checking application health..."
        
        # Check if application is running
        if curl -f http://localhost:8000/health > /dev/null 2>&1; then
          echo "‚úÖ Application is healthy"
        else
          echo "‚ùå Application is not responding"
          exit 1
        fi

    - name: Check Database Connection
      run: |
        # Check database connection
        echo "üîç Checking database connection..."
        
        # Check database connectivity
        if php artisan tinker --execute="DB::connection()->getPdo();" > /dev/null 2>&1; then
          echo "‚úÖ Database connection is healthy"
        else
          echo "‚ùå Database connection failed"
          exit 1
        fi

    - name: Check Cache Status
      run: |
        # Check cache status
        echo "üîç Checking cache status..."
        
        # Check cache connectivity
        if php artisan tinker --execute="Cache::put('test', 'value', 60); Cache::get('test');" > /dev/null 2>&1; then
          echo "‚úÖ Cache is healthy"
        else
          echo "‚ùå Cache is not working"
          exit 1
        fi

    - name: Check Queue Status
      run: |
        # Check queue status
        echo "üîç Checking queue status..."
        
        # Check queue connectivity
        if php artisan tinker --execute="dispatch(new App\Jobs\ProcessOrder(1));" > /dev/null 2>&1; then
          echo "‚úÖ Queue is healthy"
        else
          echo "‚ùå Queue is not working"
          exit 1
        fi

    - name: Check Disk Space
      run: |
        # Check disk space
        echo "üîç Checking disk space..."
        
        # Check available disk space
        DISK_USAGE=$(df -h / | awk 'NR==2{print $5}' | sed 's/%//')
        if [ "$DISK_USAGE" -lt 90 ]; then
          echo "‚úÖ Disk space is healthy: ${DISK_USAGE}% used"
        else
          echo "‚ùå Disk space is low: ${DISK_USAGE}% used"
          exit 1
        fi

    - name: Check Memory Usage
      run: |
        # Check memory usage
        echo "üîç Checking memory usage..."
        
        # Check available memory
        MEMORY_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
        if [ "$MEMORY_USAGE" -lt 90 ]; then
          echo "‚úÖ Memory usage is healthy: ${MEMORY_USAGE}% used"
        else
          echo "‚ùå Memory usage is high: ${MEMORY_USAGE}% used"
          exit 1
        fi

    - name: Check CPU Usage
      run: |
        # Check CPU usage
        echo "üîç Checking CPU usage..."
        
        # Check CPU usage
        CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | awk -F'%' '{print $1}')
        if [ "$CPU_USAGE" -lt 90 ]; then
          echo "‚úÖ CPU usage is healthy: ${CPU_USAGE}% used"
        else
          echo "‚ùå CPU usage is high: ${CPU_USAGE}% used"
          exit 1
        fi

    - name: Check Network Connectivity
      run: |
        # Check network connectivity
        echo "üîç Checking network connectivity..."
        
        # Check internet connectivity
        if ping -c 1 google.com > /dev/null 2>&1; then
          echo "‚úÖ Network connectivity is healthy"
        else
          echo "‚ùå Network connectivity failed"
          exit 1
        fi

    - name: Check SSL Certificate
      run: |
        # Check SSL certificate
        echo "üîç Checking SSL certificate..."
        
        # Check SSL certificate validity
        if openssl s_client -connect localhost:443 -servername localhost < /dev/null 2>/dev/null | openssl x509 -noout -dates > /dev/null 2>&1; then
          echo "‚úÖ SSL certificate is valid"
        else
          echo "‚ùå SSL certificate is invalid or expired"
          exit 1
        fi

    - name: Check Log Files
      run: |
        # Check log files
        echo "üîç Checking log files..."
        
        # Check for error logs
        if [ -f "storage/logs/laravel.log" ]; then
          ERROR_COUNT=$(grep -c "ERROR" storage/logs/laravel.log || echo "0")
          if [ "$ERROR_COUNT" -lt 100 ]; then
            echo "‚úÖ Log files are healthy: $ERROR_COUNT errors"
          else
            echo "‚ùå Too many errors in log files: $ERROR_COUNT errors"
            exit 1
          fi
        else
          echo "‚úÖ No log files found"
        fi

    - name: Check Backup Status
      run: |
        # Check backup status
        echo "üîç Checking backup status..."
        
        # Check if backup directory exists
        if [ -d "backups" ]; then
          BACKUP_COUNT=$(ls -1 backups/ | wc -l)
          if [ "$BACKUP_COUNT" -gt 0 ]; then
            echo "‚úÖ Backups are available: $BACKUP_COUNT backups"
          else
            echo "‚ùå No backups found"
            exit 1
          fi
        else
          echo "‚ùå Backup directory not found"
          exit 1
        fi

    - name: Update Status
      run: |
        echo "‚úÖ All monitoring checks passed"